//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GoWHMgmAdmin {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetInventory")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetInventory : global::System.Data.DataSet {
        
        private tblWorkDataTable tabletblWork;
        
        private tblWorkDDataTable tabletblWorkD;
        
        private global::System.Data.DataRelation relationtblWorkDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetInventory() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetInventory(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblWork"] != null)) {
                    base.Tables.Add(new tblWorkDataTable(ds.Tables["tblWork"]));
                }
                if ((ds.Tables["tblWorkD"] != null)) {
                    base.Tables.Add(new tblWorkDDataTable(ds.Tables["tblWorkD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblWorkDataTable tblWork {
            get {
                return this.tabletblWork;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblWorkDDataTable tblWorkD {
            get {
                return this.tabletblWorkD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSetInventory cln = ((DataSetInventory)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblWork"] != null)) {
                    base.Tables.Add(new tblWorkDataTable(ds.Tables["tblWork"]));
                }
                if ((ds.Tables["tblWorkD"] != null)) {
                    base.Tables.Add(new tblWorkDDataTable(ds.Tables["tblWorkD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblWork = ((tblWorkDataTable)(base.Tables["tblWork"]));
            if ((initTable == true)) {
                if ((this.tabletblWork != null)) {
                    this.tabletblWork.InitVars();
                }
            }
            this.tabletblWorkD = ((tblWorkDDataTable)(base.Tables["tblWorkD"]));
            if ((initTable == true)) {
                if ((this.tabletblWorkD != null)) {
                    this.tabletblWorkD.InitVars();
                }
            }
            this.relationtblWorkDetail = this.Relations["tblWorkDetail"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetInventory";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetInventory.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblWork = new tblWorkDataTable();
            base.Tables.Add(this.tabletblWork);
            this.tabletblWorkD = new tblWorkDDataTable();
            base.Tables.Add(this.tabletblWorkD);
            this.relationtblWorkDetail = new global::System.Data.DataRelation("tblWorkDetail", new global::System.Data.DataColumn[] {
                        this.tabletblWork.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletblWorkD.ID_RECColumn}, false);
            this.Relations.Add(this.relationtblWorkDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblWork() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblWorkD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetInventory ds = new DataSetInventory();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tblWorkRowChangeEventHandler(object sender, tblWorkRowChangeEvent e);
        
        public delegate void tblWorkDRowChangeEventHandler(object sender, tblWorkDRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblWorkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnWHCode;
            
            private global::System.Data.DataColumn columnArticleCode;
            
            private global::System.Data.DataColumn columnArticleDescription;
            
            private global::System.Data.DataColumn columnInventoryQty;
            
            private global::System.Data.DataColumn columnStockBalance;
            
            private global::System.Data.DataColumn columnCompPlus;
            
            private global::System.Data.DataColumn columnCompMinus;
            
            private global::System.Data.DataColumn columnDiffQty;
            
            private global::System.Data.DataColumn columnDiffAvgCost;
            
            private global::System.Data.DataColumn columnAVGCostPU;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkDataTable() {
                this.TableName = "tblWork";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblWorkDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblWorkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHCodeColumn {
                get {
                    return this.columnWHCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleCodeColumn {
                get {
                    return this.columnArticleCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleDescriptionColumn {
                get {
                    return this.columnArticleDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryQtyColumn {
                get {
                    return this.columnInventoryQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockBalanceColumn {
                get {
                    return this.columnStockBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompPlusColumn {
                get {
                    return this.columnCompPlus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompMinusColumn {
                get {
                    return this.columnCompMinus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiffQtyColumn {
                get {
                    return this.columnDiffQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiffAvgCostColumn {
                get {
                    return this.columnDiffAvgCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AVGCostPUColumn {
                get {
                    return this.columnAVGCostPU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkRow this[int index] {
                get {
                    return ((tblWorkRow)(this.Rows[index]));
                }
            }
            
            public event tblWorkRowChangeEventHandler tblWorkRowChanging;
            
            public event tblWorkRowChangeEventHandler tblWorkRowChanged;
            
            public event tblWorkRowChangeEventHandler tblWorkRowDeleting;
            
            public event tblWorkRowChangeEventHandler tblWorkRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblWorkRow(tblWorkRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkRow AddtblWorkRow(int ID, string WHCode, string ArticleCode, string ArticleDescription, decimal InventoryQty, decimal StockBalance, decimal CompPlus, decimal CompMinus, decimal DiffQty, decimal DiffAvgCost, decimal AVGCostPU) {
                tblWorkRow rowtblWorkRow = ((tblWorkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        WHCode,
                        ArticleCode,
                        ArticleDescription,
                        InventoryQty,
                        StockBalance,
                        CompPlus,
                        CompMinus,
                        DiffQty,
                        DiffAvgCost,
                        AVGCostPU};
                rowtblWorkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblWorkRow);
                return rowtblWorkRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblWorkDataTable cln = ((tblWorkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblWorkDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnWHCode = base.Columns["WHCode"];
                this.columnArticleCode = base.Columns["ArticleCode"];
                this.columnArticleDescription = base.Columns["ArticleDescription"];
                this.columnInventoryQty = base.Columns["InventoryQty"];
                this.columnStockBalance = base.Columns["StockBalance"];
                this.columnCompPlus = base.Columns["CompPlus"];
                this.columnCompMinus = base.Columns["CompMinus"];
                this.columnDiffQty = base.Columns["DiffQty"];
                this.columnDiffAvgCost = base.Columns["DiffAvgCost"];
                this.columnAVGCostPU = base.Columns["AVGCostPU"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnWHCode = new global::System.Data.DataColumn("WHCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHCode);
                this.columnArticleCode = new global::System.Data.DataColumn("ArticleCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleCode);
                this.columnArticleDescription = new global::System.Data.DataColumn("ArticleDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleDescription);
                this.columnInventoryQty = new global::System.Data.DataColumn("InventoryQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryQty);
                this.columnStockBalance = new global::System.Data.DataColumn("StockBalance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockBalance);
                this.columnCompPlus = new global::System.Data.DataColumn("CompPlus", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompPlus);
                this.columnCompMinus = new global::System.Data.DataColumn("CompMinus", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompMinus);
                this.columnDiffQty = new global::System.Data.DataColumn("DiffQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiffQty);
                this.columnDiffAvgCost = new global::System.Data.DataColumn("DiffAvgCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiffAvgCost);
                this.columnAVGCostPU = new global::System.Data.DataColumn("AVGCostPU", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAVGCostPU);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkRow NewtblWorkRow() {
                return ((tblWorkRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblWorkRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblWorkRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblWorkRowChanged != null)) {
                    this.tblWorkRowChanged(this, new tblWorkRowChangeEvent(((tblWorkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblWorkRowChanging != null)) {
                    this.tblWorkRowChanging(this, new tblWorkRowChangeEvent(((tblWorkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblWorkRowDeleted != null)) {
                    this.tblWorkRowDeleted(this, new tblWorkRowChangeEvent(((tblWorkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblWorkRowDeleting != null)) {
                    this.tblWorkRowDeleting(this, new tblWorkRowChangeEvent(((tblWorkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblWorkRow(tblWorkRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetInventory ds = new DataSetInventory();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblWorkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblWorkDDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID_REC;
            
            private global::System.Data.DataColumn columnCountQty;
            
            private global::System.Data.DataColumn columnCountNo;
            
            private global::System.Data.DataColumn columnLocator;
            
            private global::System.Data.DataColumn columnAreaCode;
            
            private global::System.Data.DataColumn columnListNumber;
            
            private global::System.Data.DataColumn columnOperator;
            
            private global::System.Data.DataColumn columnIsValidate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkDDataTable() {
                this.TableName = "tblWorkD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblWorkDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblWorkDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_RECColumn {
                get {
                    return this.columnID_REC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountQtyColumn {
                get {
                    return this.columnCountQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountNoColumn {
                get {
                    return this.columnCountNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocatorColumn {
                get {
                    return this.columnLocator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaCodeColumn {
                get {
                    return this.columnAreaCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListNumberColumn {
                get {
                    return this.columnListNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorColumn {
                get {
                    return this.columnOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValidateColumn {
                get {
                    return this.columnIsValidate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkDRow this[int index] {
                get {
                    return ((tblWorkDRow)(this.Rows[index]));
                }
            }
            
            public event tblWorkDRowChangeEventHandler tblWorkDRowChanging;
            
            public event tblWorkDRowChangeEventHandler tblWorkDRowChanged;
            
            public event tblWorkDRowChangeEventHandler tblWorkDRowDeleting;
            
            public event tblWorkDRowChangeEventHandler tblWorkDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblWorkDRow(tblWorkDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkDRow AddtblWorkDRow(tblWorkRow parenttblWorkRowBytblWorkDetail, decimal CountQty, short CountNo, string Locator, string AreaCode, string ListNumber, string Operator, string IsValidate) {
                tblWorkDRow rowtblWorkDRow = ((tblWorkDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CountQty,
                        CountNo,
                        Locator,
                        AreaCode,
                        ListNumber,
                        Operator,
                        IsValidate};
                if ((parenttblWorkRowBytblWorkDetail != null)) {
                    columnValuesArray[0] = parenttblWorkRowBytblWorkDetail[0];
                }
                rowtblWorkDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblWorkDRow);
                return rowtblWorkDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblWorkDDataTable cln = ((tblWorkDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblWorkDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_REC = base.Columns["ID_REC"];
                this.columnCountQty = base.Columns["CountQty"];
                this.columnCountNo = base.Columns["CountNo"];
                this.columnLocator = base.Columns["Locator"];
                this.columnAreaCode = base.Columns["AreaCode"];
                this.columnListNumber = base.Columns["ListNumber"];
                this.columnOperator = base.Columns["Operator"];
                this.columnIsValidate = base.Columns["IsValidate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_REC = new global::System.Data.DataColumn("ID_REC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_REC);
                this.columnCountQty = new global::System.Data.DataColumn("CountQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountQty);
                this.columnCountNo = new global::System.Data.DataColumn("CountNo", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountNo);
                this.columnLocator = new global::System.Data.DataColumn("Locator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocator);
                this.columnAreaCode = new global::System.Data.DataColumn("AreaCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaCode);
                this.columnListNumber = new global::System.Data.DataColumn("ListNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListNumber);
                this.columnOperator = new global::System.Data.DataColumn("Operator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperator);
                this.columnIsValidate = new global::System.Data.DataColumn("IsValidate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValidate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkDRow NewtblWorkDRow() {
                return ((tblWorkDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblWorkDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblWorkDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblWorkDRowChanged != null)) {
                    this.tblWorkDRowChanged(this, new tblWorkDRowChangeEvent(((tblWorkDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblWorkDRowChanging != null)) {
                    this.tblWorkDRowChanging(this, new tblWorkDRowChangeEvent(((tblWorkDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblWorkDRowDeleted != null)) {
                    this.tblWorkDRowDeleted(this, new tblWorkDRowChangeEvent(((tblWorkDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblWorkDRowDeleting != null)) {
                    this.tblWorkDRowDeleting(this, new tblWorkDRowChangeEvent(((tblWorkDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblWorkDRow(tblWorkDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetInventory ds = new DataSetInventory();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblWorkDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblWorkRow : global::System.Data.DataRow {
            
            private tblWorkDataTable tabletblWork;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblWorkRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblWork = ((tblWorkDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tabletblWork.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHCode {
                get {
                    try {
                        return ((string)(this[this.tabletblWork.WHCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WHCode\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.WHCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArticleCode {
                get {
                    try {
                        return ((string)(this[this.tabletblWork.ArticleCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArticleCode\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.ArticleCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArticleDescription {
                get {
                    try {
                        return ((string)(this[this.tabletblWork.ArticleDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArticleDescription\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.ArticleDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InventoryQty {
                get {
                    try {
                        return ((decimal)(this[this.tabletblWork.InventoryQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InventoryQty\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.InventoryQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StockBalance {
                get {
                    try {
                        return ((decimal)(this[this.tabletblWork.StockBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StockBalance\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.StockBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompPlus {
                get {
                    try {
                        return ((decimal)(this[this.tabletblWork.CompPlusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompPlus\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.CompPlusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompMinus {
                get {
                    try {
                        return ((decimal)(this[this.tabletblWork.CompMinusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompMinus\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.CompMinusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DiffQty {
                get {
                    try {
                        return ((decimal)(this[this.tabletblWork.DiffQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiffQty\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.DiffQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DiffAvgCost {
                get {
                    try {
                        return ((decimal)(this[this.tabletblWork.DiffAvgCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiffAvgCost\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.DiffAvgCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AVGCostPU {
                get {
                    try {
                        return ((decimal)(this[this.tabletblWork.AVGCostPUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AVGCostPU\' in table \'tblWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWork.AVGCostPUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tabletblWork.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tabletblWork.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHCodeNull() {
                return this.IsNull(this.tabletblWork.WHCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHCodeNull() {
                this[this.tabletblWork.WHCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArticleCodeNull() {
                return this.IsNull(this.tabletblWork.ArticleCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArticleCodeNull() {
                this[this.tabletblWork.ArticleCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArticleDescriptionNull() {
                return this.IsNull(this.tabletblWork.ArticleDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArticleDescriptionNull() {
                this[this.tabletblWork.ArticleDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryQtyNull() {
                return this.IsNull(this.tabletblWork.InventoryQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryQtyNull() {
                this[this.tabletblWork.InventoryQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockBalanceNull() {
                return this.IsNull(this.tabletblWork.StockBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockBalanceNull() {
                this[this.tabletblWork.StockBalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompPlusNull() {
                return this.IsNull(this.tabletblWork.CompPlusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompPlusNull() {
                this[this.tabletblWork.CompPlusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompMinusNull() {
                return this.IsNull(this.tabletblWork.CompMinusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompMinusNull() {
                this[this.tabletblWork.CompMinusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiffQtyNull() {
                return this.IsNull(this.tabletblWork.DiffQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiffQtyNull() {
                this[this.tabletblWork.DiffQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiffAvgCostNull() {
                return this.IsNull(this.tabletblWork.DiffAvgCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiffAvgCostNull() {
                this[this.tabletblWork.DiffAvgCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAVGCostPUNull() {
                return this.IsNull(this.tabletblWork.AVGCostPUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAVGCostPUNull() {
                this[this.tabletblWork.AVGCostPUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkDRow[] GettblWorkDRows() {
                if ((this.Table.ChildRelations["tblWorkDetail"] == null)) {
                    return new tblWorkDRow[0];
                }
                else {
                    return ((tblWorkDRow[])(base.GetChildRows(this.Table.ChildRelations["tblWorkDetail"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblWorkDRow : global::System.Data.DataRow {
            
            private tblWorkDDataTable tabletblWorkD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblWorkDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblWorkD = ((tblWorkDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_REC {
                get {
                    try {
                        return ((int)(this[this.tabletblWorkD.ID_RECColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_REC\' in table \'tblWorkD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWorkD.ID_RECColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CountQty {
                get {
                    try {
                        return ((decimal)(this[this.tabletblWorkD.CountQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountQty\' in table \'tblWorkD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWorkD.CountQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CountNo {
                get {
                    try {
                        return ((short)(this[this.tabletblWorkD.CountNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountNo\' in table \'tblWorkD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWorkD.CountNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Locator {
                get {
                    try {
                        return ((string)(this[this.tabletblWorkD.LocatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Locator\' in table \'tblWorkD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWorkD.LocatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AreaCode {
                get {
                    try {
                        return ((string)(this[this.tabletblWorkD.AreaCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaCode\' in table \'tblWorkD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWorkD.AreaCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ListNumber {
                get {
                    try {
                        return ((string)(this[this.tabletblWorkD.ListNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ListNumber\' in table \'tblWorkD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWorkD.ListNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Operator {
                get {
                    try {
                        return ((string)(this[this.tabletblWorkD.OperatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Operator\' in table \'tblWorkD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWorkD.OperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsValidate {
                get {
                    try {
                        return ((string)(this[this.tabletblWorkD.IsValidateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValidate\' in table \'tblWorkD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblWorkD.IsValidateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkRow tblWorkRow {
                get {
                    return ((tblWorkRow)(this.GetParentRow(this.Table.ParentRelations["tblWorkDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tblWorkDetail"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_RECNull() {
                return this.IsNull(this.tabletblWorkD.ID_RECColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_RECNull() {
                this[this.tabletblWorkD.ID_RECColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountQtyNull() {
                return this.IsNull(this.tabletblWorkD.CountQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountQtyNull() {
                this[this.tabletblWorkD.CountQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNoNull() {
                return this.IsNull(this.tabletblWorkD.CountNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNoNull() {
                this[this.tabletblWorkD.CountNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocatorNull() {
                return this.IsNull(this.tabletblWorkD.LocatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocatorNull() {
                this[this.tabletblWorkD.LocatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaCodeNull() {
                return this.IsNull(this.tabletblWorkD.AreaCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaCodeNull() {
                this[this.tabletblWorkD.AreaCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsListNumberNull() {
                return this.IsNull(this.tabletblWorkD.ListNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetListNumberNull() {
                this[this.tabletblWorkD.ListNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatorNull() {
                return this.IsNull(this.tabletblWorkD.OperatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatorNull() {
                this[this.tabletblWorkD.OperatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValidateNull() {
                return this.IsNull(this.tabletblWorkD.IsValidateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValidateNull() {
                this[this.tabletblWorkD.IsValidateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblWorkRowChangeEvent : global::System.EventArgs {
            
            private tblWorkRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkRowChangeEvent(tblWorkRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblWorkDRowChangeEvent : global::System.EventArgs {
            
            private tblWorkDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkDRowChangeEvent(tblWorkDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblWorkDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591